---
- name: Set up the whole OSSM3 demo
  hosts: localhost
  gather_facts: no

  vars:
    namespace_tracing_system: "tracing-system"
    namespace_opentelemetrycollector: "opentelemetrycollector"
    namespace_istio_system: "istio-system"
    namespace_istio_ingress: "istio-ingress"
    namespace_bookinfo: "bookinfo"
    namespace_sample_restapi: "sample-restapi"
    tracing_ui_name: "tracing-ui"
    ingress_gateway_name: "istio-ingressgateway"
    bookinfo_pods_timeout: 60s

  tasks:
    - name: Enable Gateway API
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('url', 'https://raw.githubusercontent.com/kubernetes-sigs/gateway-api/v1.0.0/config/crd/bases/networking.x-k8s.io_gateways.yaml') }}"

    - name: Create tracing-system namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ namespace_tracing_system }}"

    - name: Install Minio for Tempo
      kubernetes.core.k8s:
        state: present
        namespace: "{{ namespace_tracing_system }}"
        definition: "{{ lookup('file', './resources/TempoOtel/minio.yaml') }}"

    - name: Wait for Minio deployment
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ namespace_tracing_system }}"
        name: minio
      until: item.status.availableReplicas > 0
      retries: 15
      delay: 10

    - name: Install TempoCR
      kubernetes.core.k8s:
        state: present
        namespace: "{{ namespace_tracing_system }}"
        definition: "{{ lookup('file', './resources/TempoOtel/tempo.yaml') }}"

    - name: Wait for TempoStack readiness
      kubernetes.core.k8s_info:
        api_version: telemetry.tempo.io/v1
        kind: TempoStack
        namespace: "{{ namespace_tracing_system }}"
        name: sample
      until: item.status.conditions | selectattr('type', 'equalto', 'Ready') | selectattr('status', 'equalto', 'True')
      retries: 15
      delay: 10

    - name: Expose Jaeger UI route
      kubernetes.core.k8s:
        state: present
        namespace: "{{ namespace_tracing_system }}"
        definition:
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: "{{ tracing_ui_name }}"
          spec:
            to:
              kind: Service
              name: tempo-sample-query-frontend
            port:
              targetPort: jaeger-ui

    - name: Create OpenTelemetryCollector namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ namespace_opentelemetrycollector }}"

    - name: Install OpenTelemetryCollector
      kubernetes.core.k8s:
        state: present
        namespace: "{{ namespace_opentelemetrycollector }}"
        definition: "{{ lookup('file', './resources/TempoOtel/opentelemetrycollector.yaml') }}"

    - name: Wait for OpenTelemetryCollector deployment
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ namespace_opentelemetrycollector }}"
        name: otel-collector
      until: item.status.availableReplicas > 0
      retries: 6
      delay: 10

    - name: Create istio-system namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ namespace_istio_system }}"

    - name: Install IstioCR
      kubernetes.core.k8s:
        state: present
        namespace: "{{ namespace_istio_system }}"
        definition: "{{ lookup('file', './resources/OSSM3/istiocr.yaml') }}"

    - name: Wait for IstioCR readiness
      kubernetes.core.k8s_info:
        api_version: networking.istio.io/v1alpha3
        kind: Istio
        namespace: "{{ namespace_istio_system }}"
        name: default
      until: item.status.conditions | selectattr('type', 'equalto', 'Ready') | selectattr('status', 'equalto', 'True')
      retries: 6
      delay: 10

    - name: Install Telemetry resource
      kubernetes.core.k8s:
        state: present
        namespace: "{{ namespace_istio_system }}"
        definition: "{{ lookup('file', './resources/TempoOtel/istioTelemetry.yaml') }}"

    - name: Label OpenTelemetryCollector namespace
      kubernetes.core.k8s:
        state: merge
        namespace: "{{ namespace_opentelemetrycollector }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ namespace_opentelemetrycollector }}"
            labels:
              istio-injection: enabled

    - name: Install KialiCR
      kubernetes.core.k8s:
        state: present
        namespace: "{{ namespace_istio_system }}"
        definition: "{{ lookup('file', './resources/Kiali/kialiCr.yaml') }}"

    - name: Wait for Kiali readiness
      kubernetes.core.k8s_info:
        api_version: networking.istio.io/v1alpha3
        kind: Kiali
        namespace: "{{ namespace_istio_system }}"
        name: kiali
      until: item.status.conditions | selectattr('type', 'equalto', 'Ready') | selectattr('status', 'equalto', 'True')
      retries: 6
      delay: 10

    - name: Create Bookinfo namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ namespace_bookinfo }}"

    - name: Label Bookinfo namespace
      kubernetes.core.k8s:
        state: merge
        namespace: "{{ namespace_bookinfo }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ namespace_bookinfo }}"
            labels:
              istio-injection: enabled

    - name: Install Bookinfo application
      kubernetes.core.k8s:
        state: present
        namespace: "{{ namespace_bookinfo }}"
        definition: "{{ lookup('file', './resources/bookinfo/base/bookinfo.yaml') }}"

    - name: Wait for Bookinfo pods to become ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ namespace_bookinfo }}"
      until: item.status.phase == "Running"
      retries: 6
      delay: 10

    - name: Create Sample RestAPI namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ namespace_sample_restapi }}"

    - name: Install Sample RestAPI application
      kubernetes.core.k8s:
        state: present
        namespace: "{{ namespace_sample_restapi }}"
        definition: "{{ lookup('file', './resources/application/kustomize/overlays/pod.yaml') }}"

    - name: Display installation completion message
      debug:
        msg: "OSSM3 demo setup completed successfully."
